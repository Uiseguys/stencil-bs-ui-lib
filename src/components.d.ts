/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';
import '@stencil/state-tunnel';

import {
  BootstrapThemeColor,
  IBreadcrumbItem,
} from './common/index';
import {
  DurationInputArg2,
} from 'moment';
import {
  Placement,
} from 'popper.js';
import {
  BootstrapThemeColor as BootstrapThemeColor2,
} from './common/bootstrap-theme-color.type';
import {
  IStcTabContentData,
  IStcTabHeaderData,
} from './components/stc-tabs/interfaces';

declare global {

  namespace StencilComponents {
    interface CwcAlert {
      'animatable': boolean;
      'dismiss': () => void;
      'dismissible': boolean;
      'onDismiss': (hostEl: HTMLElement) => void;
      'show': boolean;
      'type': string;
    }
  }

  interface HTMLCwcAlertElement extends StencilComponents.CwcAlert, HTMLStencilElement {}

  var HTMLCwcAlertElement: {
    prototype: HTMLCwcAlertElement;
    new (): HTMLCwcAlertElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-alert': HTMLCwcAlertElement;
  }
  interface ElementTagNameMap {
    'cwc-alert': HTMLCwcAlertElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-alert': JSXElements.CwcAlertAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcAlertAttributes extends HTMLAttributes {
      'animatable'?: boolean;
      'dismissible'?: boolean;
      'onDismiss'?: (hostEl: HTMLElement) => void;
      'onToggleVisibility'?: (event: CustomEvent) => void;
      'show'?: boolean;
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcAutocompleteSelect {
      /**
       * Public methods
       */
      'close': () => void;
      'data': any[];
      'id': string;
      'idValue': string;
      'label': string;
      'minSearchLength': number;
      'placeholder': string;
      'searchKey': string;
    }
  }

  interface HTMLCwcAutocompleteSelectElement extends StencilComponents.CwcAutocompleteSelect, HTMLStencilElement {}

  var HTMLCwcAutocompleteSelectElement: {
    prototype: HTMLCwcAutocompleteSelectElement;
    new (): HTMLCwcAutocompleteSelectElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-autocomplete-select': HTMLCwcAutocompleteSelectElement;
  }
  interface ElementTagNameMap {
    'cwc-autocomplete-select': HTMLCwcAutocompleteSelectElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-autocomplete-select': JSXElements.CwcAutocompleteSelectAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcAutocompleteSelectAttributes extends HTMLAttributes {
      'data'?: any[];
      'id'?: string;
      'idValue'?: string;
      'label'?: string;
      'minSearchLength'?: number;
      'onMultiselectOnSubmit'?: (event: CustomEvent) => void;
      'onPostValue'?: (event: CustomEvent) => void;
      'placeholder'?: string;
      'searchKey'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcAvatar {
      'background': string;
      'color': string;
      'fontSize': number;
      'length': number;
      'name': string;
      'rounded': boolean;
      'size': number;
      'uppercase': boolean;
    }
  }

  interface HTMLCwcAvatarElement extends StencilComponents.CwcAvatar, HTMLStencilElement {}

  var HTMLCwcAvatarElement: {
    prototype: HTMLCwcAvatarElement;
    new (): HTMLCwcAvatarElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-avatar': HTMLCwcAvatarElement;
  }
  interface ElementTagNameMap {
    'cwc-avatar': HTMLCwcAvatarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-avatar': JSXElements.CwcAvatarAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcAvatarAttributes extends HTMLAttributes {
      'background'?: string;
      'color'?: string;
      'fontSize'?: number;
      'length'?: number;
      'name'?: string;
      'rounded'?: boolean;
      'size'?: number;
      'uppercase'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcDatepicker {
      'endDate': string;
      'for': string;
      'format': string;
      'id': string;
      'label': string;
      'lang': string;
      'startDate': string;
    }
  }

  interface HTMLCwcDatepickerElement extends StencilComponents.CwcDatepicker, HTMLStencilElement {}

  var HTMLCwcDatepickerElement: {
    prototype: HTMLCwcDatepickerElement;
    new (): HTMLCwcDatepickerElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-datepicker': HTMLCwcDatepickerElement;
  }
  interface ElementTagNameMap {
    'cwc-datepicker': HTMLCwcDatepickerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-datepicker': JSXElements.CwcDatepickerAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcDatepickerAttributes extends HTMLAttributes {
      'endDate'?: string;
      'for'?: string;
      'format'?: string;
      'id'?: string;
      'label'?: string;
      'lang'?: string;
      'onPostValue'?: (event: CustomEvent) => void;
      'onStatechange'?: (event: CustomEvent) => void;
      'startDate'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcDnd {
      'dragulaOpts': any;
      'getDataModel': () => any[];
      'getDrake': () => any;
      'handleClass': string;
      'rows': string[];
    }
  }

  interface HTMLCwcDndElement extends StencilComponents.CwcDnd, HTMLStencilElement {}

  var HTMLCwcDndElement: {
    prototype: HTMLCwcDndElement;
    new (): HTMLCwcDndElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-dnd': HTMLCwcDndElement;
  }
  interface ElementTagNameMap {
    'cwc-dnd': HTMLCwcDndElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-dnd': JSXElements.CwcDndAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcDndAttributes extends HTMLAttributes {
      'dragulaOpts'?: any;
      'handleClass'?: string;
      'onDndcancel'?: (event: CustomEvent) => void;
      'onDndcloned'?: (event: CustomEvent) => void;
      /**
       * Dragula events
       */
      'onDnddrag'?: (event: CustomEvent) => void;
      'onDnddragend'?: (event: CustomEvent) => void;
      'onDnddrop'?: (event: CustomEvent) => void;
      'onDndmodelupdate'?: (event: CustomEvent) => void;
      'onDndout'?: (event: CustomEvent) => void;
      'onDndover'?: (event: CustomEvent) => void;
      'onDndremove'?: (event: CustomEvent) => void;
      'onDndshadow'?: (event: CustomEvent) => void;
      'rows'?: string[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcDropdown {
      'close': () => void;
      'open': () => void;
      'toggle': () => void;
    }
  }

  interface HTMLCwcDropdownElement extends StencilComponents.CwcDropdown, HTMLStencilElement {}

  var HTMLCwcDropdownElement: {
    prototype: HTMLCwcDropdownElement;
    new (): HTMLCwcDropdownElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-dropdown': HTMLCwcDropdownElement;
  }
  interface ElementTagNameMap {
    'cwc-dropdown': HTMLCwcDropdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-dropdown': JSXElements.CwcDropdownAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcDropdownAttributes extends HTMLAttributes {
      'onChange'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcFileInput {
      'accept': string;
      'files': any[];
      'formDataName': string;
      'headers': string;
      'maxFileSize': number;
      'maxFiles': number;
      'method': string;
      'noAuto': boolean;
      'nodrop': boolean;
      'target': string;
      'timeout': number;
      'type': BootstrapThemeColor;
    }
  }

  interface HTMLCwcFileInputElement extends StencilComponents.CwcFileInput, HTMLStencilElement {}

  var HTMLCwcFileInputElement: {
    prototype: HTMLCwcFileInputElement;
    new (): HTMLCwcFileInputElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-file-input': HTMLCwcFileInputElement;
  }
  interface ElementTagNameMap {
    'cwc-file-input': HTMLCwcFileInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-file-input': JSXElements.CwcFileInputAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcFileInputAttributes extends HTMLAttributes {
      'accept'?: string;
      'files'?: any[];
      'formDataName'?: string;
      'headers'?: string;
      'maxFileSize'?: number;
      'maxFiles'?: number;
      'method'?: string;
      'noAuto'?: boolean;
      'nodrop'?: boolean;
      'target'?: string;
      'timeout'?: number;
      'type'?: BootstrapThemeColor;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcInfiniteListWatcher {
      'bindToList': boolean;
      'bottomOffset': number;
      'containerSelector': string;
      'debounce': number;
      'lastItemSelector': string;
      'listSelector': string;
      'loadMore': () => void;
    }
  }

  interface HTMLCwcInfiniteListWatcherElement extends StencilComponents.CwcInfiniteListWatcher, HTMLStencilElement {}

  var HTMLCwcInfiniteListWatcherElement: {
    prototype: HTMLCwcInfiniteListWatcherElement;
    new (): HTMLCwcInfiniteListWatcherElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-infinite-list-watcher': HTMLCwcInfiniteListWatcherElement;
  }
  interface ElementTagNameMap {
    'cwc-infinite-list-watcher': HTMLCwcInfiniteListWatcherElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-infinite-list-watcher': JSXElements.CwcInfiniteListWatcherAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcInfiniteListWatcherAttributes extends HTMLAttributes {
      'bindToList'?: boolean;
      'bottomOffset'?: number;
      'containerSelector'?: string;
      'debounce'?: number;
      'lastItemSelector'?: string;
      'listSelector'?: string;
      'onOnBottomReach'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcInlineeditTextarea {
      'label': string;
      'value': string;
    }
  }

  interface HTMLCwcInlineeditTextareaElement extends StencilComponents.CwcInlineeditTextarea, HTMLStencilElement {}

  var HTMLCwcInlineeditTextareaElement: {
    prototype: HTMLCwcInlineeditTextareaElement;
    new (): HTMLCwcInlineeditTextareaElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-inlineedit-textarea': HTMLCwcInlineeditTextareaElement;
  }
  interface ElementTagNameMap {
    'cwc-inlineedit-textarea': HTMLCwcInlineeditTextareaElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-inlineedit-textarea': JSXElements.CwcInlineeditTextareaAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcInlineeditTextareaAttributes extends HTMLAttributes {
      'label'?: string;
      'onOncancel'?: (event: CustomEvent) => void;
      'onOnchange'?: (event: CustomEvent) => void;
      'onOnconfirm'?: (event: CustomEvent) => void;
      'value'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcInlineedit {
      'for': string;
      'id': string;
      'label': string;
      'placeholder': string;
      'value': any;
    }
  }

  interface HTMLCwcInlineeditElement extends StencilComponents.CwcInlineedit, HTMLStencilElement {}

  var HTMLCwcInlineeditElement: {
    prototype: HTMLCwcInlineeditElement;
    new (): HTMLCwcInlineeditElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-inlineedit': HTMLCwcInlineeditElement;
  }
  interface ElementTagNameMap {
    'cwc-inlineedit': HTMLCwcInlineeditElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-inlineedit': JSXElements.CwcInlineeditAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcInlineeditAttributes extends HTMLAttributes {
      'for'?: string;
      'id'?: string;
      'label'?: string;
      'onOncancel'?: (event: CustomEvent) => void;
      'onOnchange'?: (event: CustomEvent) => void;
      'onOnconfirm'?: (event: CustomEvent) => void;
      'onPostValue'?: (event: CustomEvent) => void;
      'placeholder'?: string;
      'value'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcList {
      'addClass': string;
      'addClassEven': string;
      'addClassFirst': string;
      'addClassLast': string;
      'addClassOdd': string;
      'itemAs': string;
      'items': object[];
      'template': string;
      'wrapperClass': string;
    }
  }

  interface HTMLCwcListElement extends StencilComponents.CwcList, HTMLStencilElement {}

  var HTMLCwcListElement: {
    prototype: HTMLCwcListElement;
    new (): HTMLCwcListElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-list': HTMLCwcListElement;
  }
  interface ElementTagNameMap {
    'cwc-list': HTMLCwcListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-list': JSXElements.CwcListAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcListAttributes extends HTMLAttributes {
      'addClass'?: string;
      'addClassEven'?: string;
      'addClassFirst'?: string;
      'addClassLast'?: string;
      'addClassOdd'?: string;
      'itemAs'?: string;
      'items'?: object[];
      'template'?: string;
      'wrapperClass'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcMarkdown {
      'data': string;
    }
  }

  interface HTMLCwcMarkdownElement extends StencilComponents.CwcMarkdown, HTMLStencilElement {}

  var HTMLCwcMarkdownElement: {
    prototype: HTMLCwcMarkdownElement;
    new (): HTMLCwcMarkdownElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-markdown': HTMLCwcMarkdownElement;
  }
  interface ElementTagNameMap {
    'cwc-markdown': HTMLCwcMarkdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-markdown': JSXElements.CwcMarkdownAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcMarkdownAttributes extends HTMLAttributes {
      'data'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcModal {
      'animation': boolean;
      'backdrop': any;
      'btntype': string;
      'centered': boolean;
      'closeModal': () => void;
      'customId': string;
      'getModalRef': () => this;
      'keyboard': boolean;
      'modalTitle': string;
      'modalfocus': boolean;
      'openModal': () => void;
      'show': boolean;
      'showButton': boolean;
      'size': string;
      'toggle': () => any;
    }
  }

  interface HTMLCwcModalElement extends StencilComponents.CwcModal, HTMLStencilElement {}

  var HTMLCwcModalElement: {
    prototype: HTMLCwcModalElement;
    new (): HTMLCwcModalElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-modal': HTMLCwcModalElement;
  }
  interface ElementTagNameMap {
    'cwc-modal': HTMLCwcModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-modal': JSXElements.CwcModalAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcModalAttributes extends HTMLAttributes {
      'animation'?: boolean;
      'backdrop'?: any;
      'btntype'?: string;
      'centered'?: boolean;
      'customId'?: string;
      'keyboard'?: boolean;
      'modalTitle'?: string;
      'modalfocus'?: boolean;
      'onOnCloseModal'?: (event: CustomEvent) => void;
      'onOnOpenModal'?: (event: CustomEvent) => void;
      'show'?: boolean;
      'showButton'?: boolean;
      'size'?: string;
      'toggle'?: () => any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcMoment {
      'date': string;
      'diff': boolean;
      'duration': string;
      'format': string;
      'humanize': boolean;
      'lang': string;
      'separator': string;
      'unit': DurationInputArg2;
    }
  }

  interface HTMLCwcMomentElement extends StencilComponents.CwcMoment, HTMLStencilElement {}

  var HTMLCwcMomentElement: {
    prototype: HTMLCwcMomentElement;
    new (): HTMLCwcMomentElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-moment': HTMLCwcMomentElement;
  }
  interface ElementTagNameMap {
    'cwc-moment': HTMLCwcMomentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-moment': JSXElements.CwcMomentAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcMomentAttributes extends HTMLAttributes {
      'date'?: string;
      'diff'?: boolean;
      'duration'?: string;
      'format'?: string;
      'humanize'?: boolean;
      'lang'?: string;
      'separator'?: string;
      'unit'?: DurationInputArg2;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcMultiselect {
      'dataDisplay': string;
      'selected': Array<any>;
      'value': Array<any>;
    }
  }

  interface HTMLCwcMultiselectElement extends StencilComponents.CwcMultiselect, HTMLStencilElement {}

  var HTMLCwcMultiselectElement: {
    prototype: HTMLCwcMultiselectElement;
    new (): HTMLCwcMultiselectElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-multiselect': HTMLCwcMultiselectElement;
  }
  interface ElementTagNameMap {
    'cwc-multiselect': HTMLCwcMultiselectElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-multiselect': JSXElements.CwcMultiselectAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcMultiselectAttributes extends HTMLAttributes {
      'dataDisplay'?: string;
      'onOnchange'?: (event: CustomEvent) => void;
      'selected'?: Array<any>;
      'value'?: Array<any>;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcPopper {
      'arrow': boolean;
      'autoClose': boolean;
      'close': () => void;
      'closeable': boolean;
      'isToggleBtn': boolean;
      'open': () => void;
      'placement': Placement;
      'refid': string;
      'toggle': () => void;
      'trigger': string;
    }
  }

  interface HTMLCwcPopperElement extends StencilComponents.CwcPopper, HTMLStencilElement {}

  var HTMLCwcPopperElement: {
    prototype: HTMLCwcPopperElement;
    new (): HTMLCwcPopperElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-popper': HTMLCwcPopperElement;
  }
  interface ElementTagNameMap {
    'cwc-popper': HTMLCwcPopperElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-popper': JSXElements.CwcPopperAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcPopperAttributes extends HTMLAttributes {
      'arrow'?: boolean;
      'autoClose'?: boolean;
      'closeable'?: boolean;
      'isToggleBtn'?: boolean;
      'placement'?: Placement;
      'refid'?: string;
      'trigger'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcProgressBar {
      'animated': boolean;
      'classes': string;
      'closable': boolean;
      'height': number;
      'progress': number;
      'progressBarType': BootstrapThemeColor;
      'striped': boolean;
      'text': string;
    }
  }

  interface HTMLCwcProgressBarElement extends StencilComponents.CwcProgressBar, HTMLStencilElement {}

  var HTMLCwcProgressBarElement: {
    prototype: HTMLCwcProgressBarElement;
    new (): HTMLCwcProgressBarElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-progress-bar': HTMLCwcProgressBarElement;
  }
  interface ElementTagNameMap {
    'cwc-progress-bar': HTMLCwcProgressBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-progress-bar': JSXElements.CwcProgressBarAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcProgressBarAttributes extends HTMLAttributes {
      'animated'?: boolean;
      'classes'?: string;
      'closable'?: boolean;
      'height'?: number;
      'progress'?: number;
      'progressBarType'?: BootstrapThemeColor;
      'striped'?: boolean;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcResolutionInfo {
      'height': number;
      'width': number;
    }
  }

  interface HTMLCwcResolutionInfoElement extends StencilComponents.CwcResolutionInfo, HTMLStencilElement {}

  var HTMLCwcResolutionInfoElement: {
    prototype: HTMLCwcResolutionInfoElement;
    new (): HTMLCwcResolutionInfoElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-resolution-info': HTMLCwcResolutionInfoElement;
  }
  interface ElementTagNameMap {
    'cwc-resolution-info': HTMLCwcResolutionInfoElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-resolution-info': JSXElements.CwcResolutionInfoAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcResolutionInfoAttributes extends HTMLAttributes {
      'height'?: number;
      'width'?: number;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcStickyHeader {
      'background': string;
      'color': string;
    }
  }

  interface HTMLCwcStickyHeaderElement extends StencilComponents.CwcStickyHeader, HTMLStencilElement {}

  var HTMLCwcStickyHeaderElement: {
    prototype: HTMLCwcStickyHeaderElement;
    new (): HTMLCwcStickyHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-sticky-header': HTMLCwcStickyHeaderElement;
  }
  interface ElementTagNameMap {
    'cwc-sticky-header': HTMLCwcStickyHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-sticky-header': JSXElements.CwcStickyHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcStickyHeaderAttributes extends HTMLAttributes {
      'background'?: string;
      'color'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcSticky {

    }
  }

  interface HTMLCwcStickyElement extends StencilComponents.CwcSticky, HTMLStencilElement {}

  var HTMLCwcStickyElement: {
    prototype: HTMLCwcStickyElement;
    new (): HTMLCwcStickyElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-sticky': HTMLCwcStickyElement;
  }
  interface ElementTagNameMap {
    'cwc-sticky': HTMLCwcStickyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-sticky': JSXElements.CwcStickyAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcStickyAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcStyles {

    }
  }

  interface HTMLCwcStylesElement extends StencilComponents.CwcStyles, HTMLStencilElement {}

  var HTMLCwcStylesElement: {
    prototype: HTMLCwcStylesElement;
    new (): HTMLCwcStylesElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-styles': HTMLCwcStylesElement;
  }
  interface ElementTagNameMap {
    'cwc-styles': HTMLCwcStylesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-styles': JSXElements.CwcStylesAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcStylesAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcTag {
      'classes': string;
      'closable': boolean;
      'close': (e?: UIEvent) => void;
      'imgLink': string;
      'limitTo': number;
      'link': string;
      'onCloseData': any;
      'removeOnClose': boolean;
      'rounded': boolean;
      'tagType': BootstrapThemeColor;
      'text': string;
    }
  }

  interface HTMLCwcTagElement extends StencilComponents.CwcTag, HTMLStencilElement {}

  var HTMLCwcTagElement: {
    prototype: HTMLCwcTagElement;
    new (): HTMLCwcTagElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-tag': HTMLCwcTagElement;
  }
  interface ElementTagNameMap {
    'cwc-tag': HTMLCwcTagElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-tag': JSXElements.CwcTagAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcTagAttributes extends HTMLAttributes {
      'classes'?: string;
      'closable'?: boolean;
      'imgLink'?: string;
      'limitTo'?: number;
      'link'?: string;
      'onCloseData'?: any;
      'onTagCloseEvent'?: (event: CustomEvent) => void;
      'removeOnClose'?: boolean;
      'rounded'?: boolean;
      'tagType'?: BootstrapThemeColor;
      'text'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcTypeahead {
      /**
       * Public methods
       */
      'close': () => void;
      'data': any[];
      'googleAutocomplete': boolean;
      'highlight': boolean;
      'idValue': string;
      'itemAs': string;
      'minSearchLength': number;
      'placeholder': string;
      'searchKey': string;
      'template': string;
    }
  }

  interface HTMLCwcTypeaheadElement extends StencilComponents.CwcTypeahead, HTMLStencilElement {}

  var HTMLCwcTypeaheadElement: {
    prototype: HTMLCwcTypeaheadElement;
    new (): HTMLCwcTypeaheadElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-typeahead': HTMLCwcTypeaheadElement;
  }
  interface ElementTagNameMap {
    'cwc-typeahead': HTMLCwcTypeaheadElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-typeahead': JSXElements.CwcTypeaheadAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcTypeaheadAttributes extends HTMLAttributes {
      'data'?: any[];
      'googleAutocomplete'?: boolean;
      'highlight'?: boolean;
      'idValue'?: string;
      'itemAs'?: string;
      'minSearchLength'?: number;
      'onTypeaheadOnSubmit'?: (event: CustomEvent) => void;
      'placeholder'?: string;
      'searchKey'?: string;
      'template'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface CwcWysiwygEditor {
      'autoDownloadFontAwesome': boolean;
      'autofocus': boolean;
      'blockStyles': object;
      'forceSync': boolean;
      'getRef': () => any;
      'hideIcons': Array<any>;
      'indentWithTabs': boolean;
      'insertTexts': object;
      'lineWrapping': boolean;
      'parsingConfig': object;
      'placeholder': string;
      'previewRender': (string?) => string;
      'promptURLs': boolean;
      'renderingConfig': object;
      'shortcuts': object;
      'showIcons': Array<string>;
      'spellChecker': boolean;
      'status': any;
      'styleSelectedText': boolean;
      'tabSize': number;
      'toolbar': any;
      'toolbarTips': boolean;
    }
  }

  interface HTMLCwcWysiwygEditorElement extends StencilComponents.CwcWysiwygEditor, HTMLStencilElement {}

  var HTMLCwcWysiwygEditorElement: {
    prototype: HTMLCwcWysiwygEditorElement;
    new (): HTMLCwcWysiwygEditorElement;
  };
  interface HTMLElementTagNameMap {
    'cwc-wysiwyg-editor': HTMLCwcWysiwygEditorElement;
  }
  interface ElementTagNameMap {
    'cwc-wysiwyg-editor': HTMLCwcWysiwygEditorElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'cwc-wysiwyg-editor': JSXElements.CwcWysiwygEditorAttributes;
    }
  }
  namespace JSXElements {
    export interface CwcWysiwygEditorAttributes extends HTMLAttributes {
      'autoDownloadFontAwesome'?: boolean;
      'autofocus'?: boolean;
      'blockStyles'?: object;
      'forceSync'?: boolean;
      'hideIcons'?: Array<any>;
      'indentWithTabs'?: boolean;
      'insertTexts'?: object;
      'lineWrapping'?: boolean;
      'onOnchange'?: (event: CustomEvent) => void;
      'parsingConfig'?: object;
      'placeholder'?: string;
      'previewRender'?: (string?) => string;
      'promptURLs'?: boolean;
      'renderingConfig'?: object;
      'shortcuts'?: object;
      'showIcons'?: Array<string>;
      'spellChecker'?: boolean;
      'status'?: any;
      'styleSelectedText'?: boolean;
      'tabSize'?: number;
      'toolbar'?: any;
      'toolbarTips'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FclImage {
      'brokenUrl': any;
      'height': any;
      'src': any;
      'width': any;
    }
  }

  interface HTMLFclImageElement extends StencilComponents.FclImage, HTMLStencilElement {}

  var HTMLFclImageElement: {
    prototype: HTMLFclImageElement;
    new (): HTMLFclImageElement;
  };
  interface HTMLElementTagNameMap {
    'fcl-image': HTMLFclImageElement;
  }
  interface ElementTagNameMap {
    'fcl-image': HTMLFclImageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'fcl-image': JSXElements.FclImageAttributes;
    }
  }
  namespace JSXElements {
    export interface FclImageAttributes extends HTMLAttributes {
      'brokenUrl'?: any;
      'height'?: any;
      'src'?: any;
      'width'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FclVideoPlayer {
      'autoinit': boolean;
      'className': string;
      'controls': boolean;
      'poster': string;
      'theme': string;
      'thumbnail': any;
    }
  }

  interface HTMLFclVideoPlayerElement extends StencilComponents.FclVideoPlayer, HTMLStencilElement {}

  var HTMLFclVideoPlayerElement: {
    prototype: HTMLFclVideoPlayerElement;
    new (): HTMLFclVideoPlayerElement;
  };
  interface HTMLElementTagNameMap {
    'fcl-video-player': HTMLFclVideoPlayerElement;
  }
  interface ElementTagNameMap {
    'fcl-video-player': HTMLFclVideoPlayerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'fcl-video-player': JSXElements.FclVideoPlayerAttributes;
    }
  }
  namespace JSXElements {
    export interface FclVideoPlayerAttributes extends HTMLAttributes {
      'autoinit'?: boolean;
      'className'?: string;
      'controls'?: boolean;
      'poster'?: string;
      'theme'?: string;
      'thumbnail'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyCheckbox {
      'checkboxTitle': string;
      'for': string;
      'id': string;
      'value': boolean;
    }
  }

  interface HTMLMyCheckboxElement extends StencilComponents.MyCheckbox, HTMLStencilElement {}

  var HTMLMyCheckboxElement: {
    prototype: HTMLMyCheckboxElement;
    new (): HTMLMyCheckboxElement;
  };
  interface HTMLElementTagNameMap {
    'my-checkbox': HTMLMyCheckboxElement;
  }
  interface ElementTagNameMap {
    'my-checkbox': HTMLMyCheckboxElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-checkbox': JSXElements.MyCheckboxAttributes;
    }
  }
  namespace JSXElements {
    export interface MyCheckboxAttributes extends HTMLAttributes {
      'checkboxTitle'?: string;
      'for'?: string;
      'id'?: string;
      'onPostValue'?: (event: CustomEvent) => void;
      'value'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyDropdown {
      'dropdownTitle': string;
      'dropdownValue': string;
      'for': string;
      'id': string;
    }
  }

  interface HTMLMyDropdownElement extends StencilComponents.MyDropdown, HTMLStencilElement {}

  var HTMLMyDropdownElement: {
    prototype: HTMLMyDropdownElement;
    new (): HTMLMyDropdownElement;
  };
  interface HTMLElementTagNameMap {
    'my-dropdown': HTMLMyDropdownElement;
  }
  interface ElementTagNameMap {
    'my-dropdown': HTMLMyDropdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-dropdown': JSXElements.MyDropdownAttributes;
    }
  }
  namespace JSXElements {
    export interface MyDropdownAttributes extends HTMLAttributes {
      'dropdownTitle'?: string;
      'dropdownValue'?: string;
      'for'?: string;
      'id'?: string;
      'onPostValue'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyDynamicForm {
      'ajv': any;
      'form': any;
      'schema': any;
    }
  }

  interface HTMLMyDynamicFormElement extends StencilComponents.MyDynamicForm, HTMLStencilElement {}

  var HTMLMyDynamicFormElement: {
    prototype: HTMLMyDynamicFormElement;
    new (): HTMLMyDynamicFormElement;
  };
  interface HTMLElementTagNameMap {
    'my-dynamic-form': HTMLMyDynamicFormElement;
  }
  interface ElementTagNameMap {
    'my-dynamic-form': HTMLMyDynamicFormElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-dynamic-form': JSXElements.MyDynamicFormAttributes;
    }
  }
  namespace JSXElements {
    export interface MyDynamicFormAttributes extends HTMLAttributes {
      'ajv'?: any;
      'form'?: any;
      'schema'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyInput {
      'for': string;
      'format': any;
      'id': string;
      'inputTitle': string;
      'value': any;
    }
  }

  interface HTMLMyInputElement extends StencilComponents.MyInput, HTMLStencilElement {}

  var HTMLMyInputElement: {
    prototype: HTMLMyInputElement;
    new (): HTMLMyInputElement;
  };
  interface HTMLElementTagNameMap {
    'my-input': HTMLMyInputElement;
  }
  interface ElementTagNameMap {
    'my-input': HTMLMyInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-input': JSXElements.MyInputAttributes;
    }
  }
  namespace JSXElements {
    export interface MyInputAttributes extends HTMLAttributes {
      'for'?: string;
      'format'?: any;
      'id'?: string;
      'inputTitle'?: string;
      'onPostValue'?: (event: CustomEvent) => void;
      'value'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ScbBadge {
      'link': string;
      'pill': boolean;
      'type': BootstrapThemeColor;
    }
  }

  interface HTMLScbBadgeElement extends StencilComponents.ScbBadge, HTMLStencilElement {}

  var HTMLScbBadgeElement: {
    prototype: HTMLScbBadgeElement;
    new (): HTMLScbBadgeElement;
  };
  interface HTMLElementTagNameMap {
    'scb-badge': HTMLScbBadgeElement;
  }
  interface ElementTagNameMap {
    'scb-badge': HTMLScbBadgeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'scb-badge': JSXElements.ScbBadgeAttributes;
    }
  }
  namespace JSXElements {
    export interface ScbBadgeAttributes extends HTMLAttributes {
      'link'?: string;
      'pill'?: boolean;
      'type'?: BootstrapThemeColor;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ScbBreadcrumb {
      'items': IBreadcrumbItem[];
    }
  }

  interface HTMLScbBreadcrumbElement extends StencilComponents.ScbBreadcrumb, HTMLStencilElement {}

  var HTMLScbBreadcrumbElement: {
    prototype: HTMLScbBreadcrumbElement;
    new (): HTMLScbBreadcrumbElement;
  };
  interface HTMLElementTagNameMap {
    'scb-breadcrumb': HTMLScbBreadcrumbElement;
  }
  interface ElementTagNameMap {
    'scb-breadcrumb': HTMLScbBreadcrumbElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'scb-breadcrumb': JSXElements.ScbBreadcrumbAttributes;
    }
  }
  namespace JSXElements {
    export interface ScbBreadcrumbAttributes extends HTMLAttributes {
      'items'?: IBreadcrumbItem[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ScbCollapse {
      'collapseid': string;
      'items': any[];
    }
  }

  interface HTMLScbCollapseElement extends StencilComponents.ScbCollapse, HTMLStencilElement {}

  var HTMLScbCollapseElement: {
    prototype: HTMLScbCollapseElement;
    new (): HTMLScbCollapseElement;
  };
  interface HTMLElementTagNameMap {
    'scb-collapse': HTMLScbCollapseElement;
  }
  interface ElementTagNameMap {
    'scb-collapse': HTMLScbCollapseElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'scb-collapse': JSXElements.ScbCollapseAttributes;
    }
  }
  namespace JSXElements {
    export interface ScbCollapseAttributes extends HTMLAttributes {
      'collapseid'?: string;
      'items'?: any[];
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ScbNavbar {
      'bgcolor': string;
      'navbarcolor': string;
      'placement': string;
      'size': string;
    }
  }

  interface HTMLScbNavbarElement extends StencilComponents.ScbNavbar, HTMLStencilElement {}

  var HTMLScbNavbarElement: {
    prototype: HTMLScbNavbarElement;
    new (): HTMLScbNavbarElement;
  };
  interface HTMLElementTagNameMap {
    'scb-navbar': HTMLScbNavbarElement;
  }
  interface ElementTagNameMap {
    'scb-navbar': HTMLScbNavbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'scb-navbar': JSXElements.ScbNavbarAttributes;
    }
  }
  namespace JSXElements {
    export interface ScbNavbarAttributes extends HTMLAttributes {
      'bgcolor'?: string;
      'navbarcolor'?: string;
      'placement'?: string;
      'size'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ScbTooltip {
      'delay': any;
      'href': string;
      'offset': string;
      'placement': string;
      'target': string;
      'tooltipTitle': string;
      'trigger': string;
      'type': string;
    }
  }

  interface HTMLScbTooltipElement extends StencilComponents.ScbTooltip, HTMLStencilElement {}

  var HTMLScbTooltipElement: {
    prototype: HTMLScbTooltipElement;
    new (): HTMLScbTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'scb-tooltip': HTMLScbTooltipElement;
  }
  interface ElementTagNameMap {
    'scb-tooltip': HTMLScbTooltipElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'scb-tooltip': JSXElements.ScbTooltipAttributes;
    }
  }
  namespace JSXElements {
    export interface ScbTooltipAttributes extends HTMLAttributes {
      'delay'?: any;
      'href'?: string;
      'offset'?: string;
      'placement'?: string;
      'target'?: string;
      'tooltipTitle'?: string;
      'trigger'?: string;
      'type'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StcTabContent {
      'getChild': () => IStcTabContentData;
      'name': string;
    }
  }

  interface HTMLStcTabContentElement extends StencilComponents.StcTabContent, HTMLStencilElement {}

  var HTMLStcTabContentElement: {
    prototype: HTMLStcTabContentElement;
    new (): HTMLStcTabContentElement;
  };
  interface HTMLElementTagNameMap {
    'stc-tab-content': HTMLStcTabContentElement;
  }
  interface ElementTagNameMap {
    'stc-tab-content': HTMLStcTabContentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stc-tab-content': JSXElements.StcTabContentAttributes;
    }
  }
  namespace JSXElements {
    export interface StcTabContentAttributes extends HTMLAttributes {
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StcTabHeader {
      'getChild': () => IStcTabHeaderData;
      'name': string;
    }
  }

  interface HTMLStcTabHeaderElement extends StencilComponents.StcTabHeader, HTMLStencilElement {}

  var HTMLStcTabHeaderElement: {
    prototype: HTMLStcTabHeaderElement;
    new (): HTMLStcTabHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'stc-tab-header': HTMLStcTabHeaderElement;
  }
  interface ElementTagNameMap {
    'stc-tab-header': HTMLStcTabHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stc-tab-header': JSXElements.StcTabHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface StcTabHeaderAttributes extends HTMLAttributes {
      'name'?: string;
      'onOnSelect'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StcTabs {

    }
  }

  interface HTMLStcTabsElement extends StencilComponents.StcTabs, HTMLStencilElement {}

  var HTMLStcTabsElement: {
    prototype: HTMLStcTabsElement;
    new (): HTMLStcTabsElement;
  };
  interface HTMLElementTagNameMap {
    'stc-tabs': HTMLStcTabsElement;
  }
  interface ElementTagNameMap {
    'stc-tabs': HTMLStcTabsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stc-tabs': JSXElements.StcTabsAttributes;
    }
  }
  namespace JSXElements {
    export interface StcTabsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AlertsPage {

    }
  }

  interface HTMLAlertsPageElement extends StencilComponents.AlertsPage, HTMLStencilElement {}

  var HTMLAlertsPageElement: {
    prototype: HTMLAlertsPageElement;
    new (): HTMLAlertsPageElement;
  };
  interface HTMLElementTagNameMap {
    'alerts-page': HTMLAlertsPageElement;
  }
  interface ElementTagNameMap {
    'alerts-page': HTMLAlertsPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'alerts-page': JSXElements.AlertsPageAttributes;
    }
  }
  namespace JSXElements {
    export interface AlertsPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AutocompleteSelectPage {

    }
  }

  interface HTMLAutocompleteSelectPageElement extends StencilComponents.AutocompleteSelectPage, HTMLStencilElement {}

  var HTMLAutocompleteSelectPageElement: {
    prototype: HTMLAutocompleteSelectPageElement;
    new (): HTMLAutocompleteSelectPageElement;
  };
  interface HTMLElementTagNameMap {
    'autocomplete-select-page': HTMLAutocompleteSelectPageElement;
  }
  interface ElementTagNameMap {
    'autocomplete-select-page': HTMLAutocompleteSelectPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'autocomplete-select-page': JSXElements.AutocompleteSelectPageAttributes;
    }
  }
  namespace JSXElements {
    export interface AutocompleteSelectPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AvatarPage {

    }
  }

  interface HTMLAvatarPageElement extends StencilComponents.AvatarPage, HTMLStencilElement {}

  var HTMLAvatarPageElement: {
    prototype: HTMLAvatarPageElement;
    new (): HTMLAvatarPageElement;
  };
  interface HTMLElementTagNameMap {
    'avatar-page': HTMLAvatarPageElement;
  }
  interface ElementTagNameMap {
    'avatar-page': HTMLAvatarPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'avatar-page': JSXElements.AvatarPageAttributes;
    }
  }
  namespace JSXElements {
    export interface AvatarPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface BadgePage {

    }
  }

  interface HTMLBadgePageElement extends StencilComponents.BadgePage, HTMLStencilElement {}

  var HTMLBadgePageElement: {
    prototype: HTMLBadgePageElement;
    new (): HTMLBadgePageElement;
  };
  interface HTMLElementTagNameMap {
    'badge-page': HTMLBadgePageElement;
  }
  interface ElementTagNameMap {
    'badge-page': HTMLBadgePageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'badge-page': JSXElements.BadgePageAttributes;
    }
  }
  namespace JSXElements {
    export interface BadgePageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface BreadcrumbPage {

    }
  }

  interface HTMLBreadcrumbPageElement extends StencilComponents.BreadcrumbPage, HTMLStencilElement {}

  var HTMLBreadcrumbPageElement: {
    prototype: HTMLBreadcrumbPageElement;
    new (): HTMLBreadcrumbPageElement;
  };
  interface HTMLElementTagNameMap {
    'breadcrumb-page': HTMLBreadcrumbPageElement;
  }
  interface ElementTagNameMap {
    'breadcrumb-page': HTMLBreadcrumbPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'breadcrumb-page': JSXElements.BreadcrumbPageAttributes;
    }
  }
  namespace JSXElements {
    export interface BreadcrumbPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface CollapsePage {

    }
  }

  interface HTMLCollapsePageElement extends StencilComponents.CollapsePage, HTMLStencilElement {}

  var HTMLCollapsePageElement: {
    prototype: HTMLCollapsePageElement;
    new (): HTMLCollapsePageElement;
  };
  interface HTMLElementTagNameMap {
    'collapse-page': HTMLCollapsePageElement;
  }
  interface ElementTagNameMap {
    'collapse-page': HTMLCollapsePageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'collapse-page': JSXElements.CollapsePageAttributes;
    }
  }
  namespace JSXElements {
    export interface CollapsePageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface DatepickerPage {

    }
  }

  interface HTMLDatepickerPageElement extends StencilComponents.DatepickerPage, HTMLStencilElement {}

  var HTMLDatepickerPageElement: {
    prototype: HTMLDatepickerPageElement;
    new (): HTMLDatepickerPageElement;
  };
  interface HTMLElementTagNameMap {
    'datepicker-page': HTMLDatepickerPageElement;
  }
  interface ElementTagNameMap {
    'datepicker-page': HTMLDatepickerPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'datepicker-page': JSXElements.DatepickerPageAttributes;
    }
  }
  namespace JSXElements {
    export interface DatepickerPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface DndPage {

    }
  }

  interface HTMLDndPageElement extends StencilComponents.DndPage, HTMLStencilElement {}

  var HTMLDndPageElement: {
    prototype: HTMLDndPageElement;
    new (): HTMLDndPageElement;
  };
  interface HTMLElementTagNameMap {
    'dnd-page': HTMLDndPageElement;
  }
  interface ElementTagNameMap {
    'dnd-page': HTMLDndPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'dnd-page': JSXElements.DndPageAttributes;
    }
  }
  namespace JSXElements {
    export interface DndPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface DropdownPage {

    }
  }

  interface HTMLDropdownPageElement extends StencilComponents.DropdownPage, HTMLStencilElement {}

  var HTMLDropdownPageElement: {
    prototype: HTMLDropdownPageElement;
    new (): HTMLDropdownPageElement;
  };
  interface HTMLElementTagNameMap {
    'dropdown-page': HTMLDropdownPageElement;
  }
  interface ElementTagNameMap {
    'dropdown-page': HTMLDropdownPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'dropdown-page': JSXElements.DropdownPageAttributes;
    }
  }
  namespace JSXElements {
    export interface DropdownPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface FclImagePage {

    }
  }

  interface HTMLFclImagePageElement extends StencilComponents.FclImagePage, HTMLStencilElement {}

  var HTMLFclImagePageElement: {
    prototype: HTMLFclImagePageElement;
    new (): HTMLFclImagePageElement;
  };
  interface HTMLElementTagNameMap {
    'fcl-image-page': HTMLFclImagePageElement;
  }
  interface ElementTagNameMap {
    'fcl-image-page': HTMLFclImagePageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'fcl-image-page': JSXElements.FclImagePageAttributes;
    }
  }
  namespace JSXElements {
    export interface FclImagePageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface FileInputPage {

    }
  }

  interface HTMLFileInputPageElement extends StencilComponents.FileInputPage, HTMLStencilElement {}

  var HTMLFileInputPageElement: {
    prototype: HTMLFileInputPageElement;
    new (): HTMLFileInputPageElement;
  };
  interface HTMLElementTagNameMap {
    'file-input-page': HTMLFileInputPageElement;
  }
  interface ElementTagNameMap {
    'file-input-page': HTMLFileInputPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'file-input-page': JSXElements.FileInputPageAttributes;
    }
  }
  namespace JSXElements {
    export interface FileInputPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface FormPage {

    }
  }

  interface HTMLFormPageElement extends StencilComponents.FormPage, HTMLStencilElement {}

  var HTMLFormPageElement: {
    prototype: HTMLFormPageElement;
    new (): HTMLFormPageElement;
  };
  interface HTMLElementTagNameMap {
    'form-page': HTMLFormPageElement;
  }
  interface ElementTagNameMap {
    'form-page': HTMLFormPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'form-page': JSXElements.FormPageAttributes;
    }
  }
  namespace JSXElements {
    export interface FormPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface InlineeditPage {

    }
  }

  interface HTMLInlineeditPageElement extends StencilComponents.InlineeditPage, HTMLStencilElement {}

  var HTMLInlineeditPageElement: {
    prototype: HTMLInlineeditPageElement;
    new (): HTMLInlineeditPageElement;
  };
  interface HTMLElementTagNameMap {
    'inlineedit-page': HTMLInlineeditPageElement;
  }
  interface ElementTagNameMap {
    'inlineedit-page': HTMLInlineeditPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'inlineedit-page': JSXElements.InlineeditPageAttributes;
    }
  }
  namespace JSXElements {
    export interface InlineeditPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface InlineeditTextareaPage {

    }
  }

  interface HTMLInlineeditTextareaPageElement extends StencilComponents.InlineeditTextareaPage, HTMLStencilElement {}

  var HTMLInlineeditTextareaPageElement: {
    prototype: HTMLInlineeditTextareaPageElement;
    new (): HTMLInlineeditTextareaPageElement;
  };
  interface HTMLElementTagNameMap {
    'inlineedit-textarea-page': HTMLInlineeditTextareaPageElement;
  }
  interface ElementTagNameMap {
    'inlineedit-textarea-page': HTMLInlineeditTextareaPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'inlineedit-textarea-page': JSXElements.InlineeditTextareaPageAttributes;
    }
  }
  namespace JSXElements {
    export interface InlineeditTextareaPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ListPage {

    }
  }

  interface HTMLListPageElement extends StencilComponents.ListPage, HTMLStencilElement {}

  var HTMLListPageElement: {
    prototype: HTMLListPageElement;
    new (): HTMLListPageElement;
  };
  interface HTMLElementTagNameMap {
    'list-page': HTMLListPageElement;
  }
  interface ElementTagNameMap {
    'list-page': HTMLListPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'list-page': JSXElements.ListPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ListPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MarkdownPage {

    }
  }

  interface HTMLMarkdownPageElement extends StencilComponents.MarkdownPage, HTMLStencilElement {}

  var HTMLMarkdownPageElement: {
    prototype: HTMLMarkdownPageElement;
    new (): HTMLMarkdownPageElement;
  };
  interface HTMLElementTagNameMap {
    'markdown-page': HTMLMarkdownPageElement;
  }
  interface ElementTagNameMap {
    'markdown-page': HTMLMarkdownPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'markdown-page': JSXElements.MarkdownPageAttributes;
    }
  }
  namespace JSXElements {
    export interface MarkdownPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ModalPage {

    }
  }

  interface HTMLModalPageElement extends StencilComponents.ModalPage, HTMLStencilElement {}

  var HTMLModalPageElement: {
    prototype: HTMLModalPageElement;
    new (): HTMLModalPageElement;
  };
  interface HTMLElementTagNameMap {
    'modal-page': HTMLModalPageElement;
  }
  interface ElementTagNameMap {
    'modal-page': HTMLModalPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'modal-page': JSXElements.ModalPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ModalPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MomentPage {

    }
  }

  interface HTMLMomentPageElement extends StencilComponents.MomentPage, HTMLStencilElement {}

  var HTMLMomentPageElement: {
    prototype: HTMLMomentPageElement;
    new (): HTMLMomentPageElement;
  };
  interface HTMLElementTagNameMap {
    'moment-page': HTMLMomentPageElement;
  }
  interface ElementTagNameMap {
    'moment-page': HTMLMomentPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'moment-page': JSXElements.MomentPageAttributes;
    }
  }
  namespace JSXElements {
    export interface MomentPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MultiselectPage {

    }
  }

  interface HTMLMultiselectPageElement extends StencilComponents.MultiselectPage, HTMLStencilElement {}

  var HTMLMultiselectPageElement: {
    prototype: HTMLMultiselectPageElement;
    new (): HTMLMultiselectPageElement;
  };
  interface HTMLElementTagNameMap {
    'multiselect-page': HTMLMultiselectPageElement;
  }
  interface ElementTagNameMap {
    'multiselect-page': HTMLMultiselectPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'multiselect-page': JSXElements.MultiselectPageAttributes;
    }
  }
  namespace JSXElements {
    export interface MultiselectPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface NavbarPage {

    }
  }

  interface HTMLNavbarPageElement extends StencilComponents.NavbarPage, HTMLStencilElement {}

  var HTMLNavbarPageElement: {
    prototype: HTMLNavbarPageElement;
    new (): HTMLNavbarPageElement;
  };
  interface HTMLElementTagNameMap {
    'navbar-page': HTMLNavbarPageElement;
  }
  interface ElementTagNameMap {
    'navbar-page': HTMLNavbarPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'navbar-page': JSXElements.NavbarPageAttributes;
    }
  }
  namespace JSXElements {
    export interface NavbarPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface PopperPage {

    }
  }

  interface HTMLPopperPageElement extends StencilComponents.PopperPage, HTMLStencilElement {}

  var HTMLPopperPageElement: {
    prototype: HTMLPopperPageElement;
    new (): HTMLPopperPageElement;
  };
  interface HTMLElementTagNameMap {
    'popper-page': HTMLPopperPageElement;
  }
  interface ElementTagNameMap {
    'popper-page': HTMLPopperPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'popper-page': JSXElements.PopperPageAttributes;
    }
  }
  namespace JSXElements {
    export interface PopperPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ProgressBarPage {

    }
  }

  interface HTMLProgressBarPageElement extends StencilComponents.ProgressBarPage, HTMLStencilElement {}

  var HTMLProgressBarPageElement: {
    prototype: HTMLProgressBarPageElement;
    new (): HTMLProgressBarPageElement;
  };
  interface HTMLElementTagNameMap {
    'progress-bar-page': HTMLProgressBarPageElement;
  }
  interface ElementTagNameMap {
    'progress-bar-page': HTMLProgressBarPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'progress-bar-page': JSXElements.ProgressBarPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ProgressBarPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ResolutionInfoPage {

    }
  }

  interface HTMLResolutionInfoPageElement extends StencilComponents.ResolutionInfoPage, HTMLStencilElement {}

  var HTMLResolutionInfoPageElement: {
    prototype: HTMLResolutionInfoPageElement;
    new (): HTMLResolutionInfoPageElement;
  };
  interface HTMLElementTagNameMap {
    'resolution-info-page': HTMLResolutionInfoPageElement;
  }
  interface ElementTagNameMap {
    'resolution-info-page': HTMLResolutionInfoPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'resolution-info-page': JSXElements.ResolutionInfoPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ResolutionInfoPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface StencilBsDemoPage {
      'root': string;
    }
  }

  interface HTMLStencilBsDemoPageElement extends StencilComponents.StencilBsDemoPage, HTMLStencilElement {}

  var HTMLStencilBsDemoPageElement: {
    prototype: HTMLStencilBsDemoPageElement;
    new (): HTMLStencilBsDemoPageElement;
  };
  interface HTMLElementTagNameMap {
    'stencil-bs-demo-page': HTMLStencilBsDemoPageElement;
  }
  interface ElementTagNameMap {
    'stencil-bs-demo-page': HTMLStencilBsDemoPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stencil-bs-demo-page': JSXElements.StencilBsDemoPageAttributes;
    }
  }
  namespace JSXElements {
    export interface StencilBsDemoPageAttributes extends HTMLAttributes {
      'root'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface StickyPage {

    }
  }

  interface HTMLStickyPageElement extends StencilComponents.StickyPage, HTMLStencilElement {}

  var HTMLStickyPageElement: {
    prototype: HTMLStickyPageElement;
    new (): HTMLStickyPageElement;
  };
  interface HTMLElementTagNameMap {
    'sticky-page': HTMLStickyPageElement;
  }
  interface ElementTagNameMap {
    'sticky-page': HTMLStickyPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'sticky-page': JSXElements.StickyPageAttributes;
    }
  }
  namespace JSXElements {
    export interface StickyPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface TabsPage {

    }
  }

  interface HTMLTabsPageElement extends StencilComponents.TabsPage, HTMLStencilElement {}

  var HTMLTabsPageElement: {
    prototype: HTMLTabsPageElement;
    new (): HTMLTabsPageElement;
  };
  interface HTMLElementTagNameMap {
    'tabs-page': HTMLTabsPageElement;
  }
  interface ElementTagNameMap {
    'tabs-page': HTMLTabsPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'tabs-page': JSXElements.TabsPageAttributes;
    }
  }
  namespace JSXElements {
    export interface TabsPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface TagPage {

    }
  }

  interface HTMLTagPageElement extends StencilComponents.TagPage, HTMLStencilElement {}

  var HTMLTagPageElement: {
    prototype: HTMLTagPageElement;
    new (): HTMLTagPageElement;
  };
  interface HTMLElementTagNameMap {
    'tag-page': HTMLTagPageElement;
  }
  interface ElementTagNameMap {
    'tag-page': HTMLTagPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'tag-page': JSXElements.TagPageAttributes;
    }
  }
  namespace JSXElements {
    export interface TagPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface TooltipPage {

    }
  }

  interface HTMLTooltipPageElement extends StencilComponents.TooltipPage, HTMLStencilElement {}

  var HTMLTooltipPageElement: {
    prototype: HTMLTooltipPageElement;
    new (): HTMLTooltipPageElement;
  };
  interface HTMLElementTagNameMap {
    'tooltip-page': HTMLTooltipPageElement;
  }
  interface ElementTagNameMap {
    'tooltip-page': HTMLTooltipPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'tooltip-page': JSXElements.TooltipPageAttributes;
    }
  }
  namespace JSXElements {
    export interface TooltipPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface TypeaheadPage {

    }
  }

  interface HTMLTypeaheadPageElement extends StencilComponents.TypeaheadPage, HTMLStencilElement {}

  var HTMLTypeaheadPageElement: {
    prototype: HTMLTypeaheadPageElement;
    new (): HTMLTypeaheadPageElement;
  };
  interface HTMLElementTagNameMap {
    'typeahead-page': HTMLTypeaheadPageElement;
  }
  interface ElementTagNameMap {
    'typeahead-page': HTMLTypeaheadPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'typeahead-page': JSXElements.TypeaheadPageAttributes;
    }
  }
  namespace JSXElements {
    export interface TypeaheadPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface VideoPlayerPage {

    }
  }

  interface HTMLVideoPlayerPageElement extends StencilComponents.VideoPlayerPage, HTMLStencilElement {}

  var HTMLVideoPlayerPageElement: {
    prototype: HTMLVideoPlayerPageElement;
    new (): HTMLVideoPlayerPageElement;
  };
  interface HTMLElementTagNameMap {
    'video-player-page': HTMLVideoPlayerPageElement;
  }
  interface ElementTagNameMap {
    'video-player-page': HTMLVideoPlayerPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'video-player-page': JSXElements.VideoPlayerPageAttributes;
    }
  }
  namespace JSXElements {
    export interface VideoPlayerPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface WysiwygEditorPage {

    }
  }

  interface HTMLWysiwygEditorPageElement extends StencilComponents.WysiwygEditorPage, HTMLStencilElement {}

  var HTMLWysiwygEditorPageElement: {
    prototype: HTMLWysiwygEditorPageElement;
    new (): HTMLWysiwygEditorPageElement;
  };
  interface HTMLElementTagNameMap {
    'wysiwyg-editor-page': HTMLWysiwygEditorPageElement;
  }
  interface ElementTagNameMap {
    'wysiwyg-editor-page': HTMLWysiwygEditorPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'wysiwyg-editor-page': JSXElements.WysiwygEditorPageAttributes;
    }
  }
  namespace JSXElements {
    export interface WysiwygEditorPageAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;