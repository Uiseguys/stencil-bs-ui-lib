const { h: t } = window.UiLib; import { a as s, e } from "./chunk-dcb1d974.js"; import "./chunk-7e847b3c.js"; import "./chunk-a7525511.js"; class i { constructor() { this.items = [], this.itemAs = "item", this.listId = "", this.addClass = "", this.addClassFirst = "", this.addClassLast = "", this.addClassEven = "", this.addClassOdd = "", this.wrapperClass = "", this.interpolationRegex = /\[\[=+(.*?) ?\]\]+/g, this.templateElement = void 0, this.templateFn = s, this.templateSettingsFn = e } addListClasses(t = "", s, e) { let i = t + " list-item".concat(this.addClass && " " + this.addClass); return 0 == s && (i += " list-item-first".concat(this.addClassFirst && " " + this.addClassFirst)), s == e - 1 && (i += " list-item-last".concat(this.addClassLast && " " + this.addClassLast)), s % 2 == 0 && (i += " list-item-even".concat(this.addClassEven && " " + this.addClassEven)), 1 == Math.abs(s % 2) && (i += " list-item-odd".concat(this.addClassOdd && " " + this.addClassOdd)), i + " " } insert(t, s, e) { return t.substr(0, s) + e + t.substr(s) } insertClassList(t, s) { const e = t.indexOf(">"), i = t.indexOf('class="'); return -1 !== i && i < e ? this.insert(t, t.indexOf('"', i + 7), this.addListClasses("", s, this.items.length)) : this.insert(t, e, this.addListClasses("", s, this.items.length)) } render() { console.log("Render method!"), console.log("template: ", s), console.log("templateFn: ", this.templateFn), this.templateSettingsFn.interpolate = this.interpolationRegex, this.templateElement ? console.log("template element present") : (console.log("template element NOT present"), this.templateElement = this.templateFn(this.el.firstElementChild.outerHTML), console.log("... and now it is: ", this.templateElement)), this.el.firstElementChild.setAttribute("style", "display:none;"), console.log("suka items: ", this.items); let e = ""; return this.items.map((t, s) => { let i = this.templateElement({ [this.itemAs]: t }); i = this.insertClassList(i, s), e += i, console.log("str updated and is: ", e) }), console.log("template suka: ", e), t("div", { id: this.listId, class: "item-list-wrapper " + this.wrapperClass, innerHTML: e }) } static get is() { return "cwc-list" } static get properties() { return { addClass: { type: String, attr: "add-class" }, addClassEven: { type: String, attr: "add-class-even" }, addClassFirst: { type: String, attr: "add-class-first" }, addClassLast: { type: String, attr: "add-class-last" }, addClassOdd: { type: String, attr: "add-class-odd" }, el: { elementRef: !0 }, interpolationRegex: { type: "Any", attr: "interpolation-regex" }, itemAs: { type: String, attr: "item-as" }, items: { type: "Any", attr: "items" }, listId: { type: String, attr: "list-id" }, wrapperClass: { type: String, attr: "wrapper-class" } } } static get style() { return "cwc-list{display:block}" } } export { i as CwcList };